/* tslint:disable */
/* eslint-disable */
/**
 * JSON Placeholder
 * Fake Online REST API for Testing and Prototyping
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Photo,
} from '../models/index';
import {
    PhotoFromJSON,
    PhotoToJSON,
} from '../models/index';

export interface GetPhotoRequest {
    id: number;
}

export interface GetPhotosRequest {
    id?: number;
    albumId?: number;
}

/**
 * 
 */
export class PhotosApi extends runtime.BaseAPI {

    /**
     * Get specific photo
     */
    async getPhotoRaw(requestParameters: GetPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Photo>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPhoto().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/photos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhotoFromJSON(jsonValue));
    }

    /**
     * Get specific photo
     */
    async getPhoto(requestParameters: GetPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Photo> {
        const response = await this.getPhotoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all available photos
     */
    async getPhotosRaw(requestParameters: GetPhotosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Photo>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['albumId'] != null) {
            queryParameters['albumId'] = requestParameters['albumId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/photos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PhotoFromJSON));
    }

    /**
     * Get all available photos
     */
    async getPhotos(requestParameters: GetPhotosRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Photo>> {
        const response = await this.getPhotosRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
