/* tslint:disable */
/* eslint-disable */
/**
 * JSON Placeholder
 * Fake Online REST API for Testing and Prototyping
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Album,
  Photo,
} from '../models/index';
import {
    AlbumFromJSON,
    AlbumToJSON,
    PhotoFromJSON,
    PhotoToJSON,
} from '../models/index';

export interface AlbumsIdGetRequest {
    id: number;
}

export interface AlbumsIdPhotosGetRequest {
    id: number;
}

export interface GetAlbumsRequest {
    id?: number;
    userId?: number;
}

/**
 * 
 */
export class AlbumsApi extends runtime.BaseAPI {

    /**
     * Get specific album
     */
    async albumsIdGetRaw(requestParameters: AlbumsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Album>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling albumsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/albums/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlbumFromJSON(jsonValue));
    }

    /**
     * Get specific album
     */
    async albumsIdGet(requestParameters: AlbumsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Album> {
        const response = await this.albumsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get photos for a specific album
     */
    async albumsIdPhotosGetRaw(requestParameters: AlbumsIdPhotosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Photo>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling albumsIdPhotosGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/albums/{id}/photos`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PhotoFromJSON));
    }

    /**
     * Get photos for a specific album
     */
    async albumsIdPhotosGet(requestParameters: AlbumsIdPhotosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Photo>> {
        const response = await this.albumsIdPhotosGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all available albums
     */
    async getAlbumsRaw(requestParameters: GetAlbumsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Album>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/albums`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlbumFromJSON));
    }

    /**
     * Get all available albums
     */
    async getAlbums(requestParameters: GetAlbumsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Album>> {
        const response = await this.getAlbumsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
